Функция getPartnerBalance(PartnerID)

    УстановитьПривилегированныйРежим(Истина);

    PartnerBalanceMetaData = СоздатьФабрикуXDTOПоИмени("PartnerBalanceMetaData");

    Если ПустаяСтрока(PartnerID) Тогда
        PartnerBalanceMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", "Wrong argument. Partner ID shoud not be empty.");
        PartnerBalanceMetaData.Data = Неопределено;
        Возврат PartnerBalanceMetaData;
    КонецЕсли;

    ПартнерСсылка = ПолучитьСсылкуНаПартнера(PartnerID);
    Если ПартнерСсылка = Неопределено Тогда
        PartnerBalanceMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", "Partner not found.");
        PartnerBalanceMetaData.Data = Неопределено;
        Возврат PartnerBalanceMetaData;
    КонецЕсли;

    СтруктураБаланса = ПолучитьБалансПартнера(ПартнерСсылка);
    Если СтруктураБаланса = Неопределено Тогда
        PartnerBalanceMetaData.Meta = СформироватьОбъектMeta(204, "NoContent", "No data found.");
        PartnerBalanceMetaData.Data = Неопределено;
        Возврат PartnerBalanceMetaData;
    КонецЕсли;

    PartnerBalanceMetaData.Meta = СформироватьОбъектMeta(200, "OK", "OK.");
    PartnerBalanceMetaData.Data = СформироватьОбъектData(СтруктураБаланса.PartnerID, СтруктураБаланса.Balance);
    Возврат PartnerBalanceMetaData

КонецФункции

// Создаем фабрику XDTO
Функция СоздатьФабрикуXDTOПоИмени(Имя)

    ТипФабрики = ФабрикаXDTO.Тип("http://www.avtomat.biz/partner_balance", Имя);
    Возврат ФабрикаXDTO.Создать(ТипФабрики);

КонецФункции // СоздатьФабрикуXDTOПоИмени()

// Формируем объект Meta для формирования объекта PartnerBalanceMetaData
Функция СформироватьОбъектMeta(Code, ErrorType, ErrorMessage)

    MetaTag = СоздатьФабрикуXDTOПоИмени("MetaTag");

    MetaTag.Code         = Code;
    MetaTag.ErrorType    = ErrorType;
    MetaTag.ErrorMessage = ErrorMessage;

    Возврат MetaTag;

КонецФункции // СформироватьОбъектMeta()

// Формируем объект Data для формирования объекта PartnerBalanceMetaData
Функция СформироватьОбъектData(PartnerID, Balance)

    DataTag = СоздатьФабрикуXDTOПоИмени("DataTag");

    DataTag.PartnerID = PartnerID;
    DataTag.Balance   = Balance;

    Возврат DataTag;

КонецФункции // СформироватьОбъект()

// Получаем ссылку на партнера по коду
Функция ПолучитьСсылкуНаПартнера(PartnerID)

    ПартнерСсылка = Справочники.Партнеры.НайтиПоКоду(СокрЛП(PartnerID));

    Если ПустаяСтрока(ПартнерСсылка.ВерсияДанных) Тогда
        Возврат Неопределено;
    КонецЕсли;

    Возврат ПартнерСсылка;

КонецФункции

// Получаем сумму задолженности партнера
Функция ПолучитьБалансПартнера(ПартнерСсылка)

    Запрос          = Новый Запрос;
    Запрос.Текст    = ТекстЗапросаБалансПарнера();

    Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
    Запрос.УстановитьПараметр("Партнер", ПартнерСсылка);
    Запрос.УстановитьПараметр("ВалютаУправленческогоУчета", Константы.ВалютаУправленческогоУчета.Получить());

    Выборка = Запрос.Выполнить().Выбрать();

    Возврат ?(Выборка.Следующий(), Выборка, Неопределено);

КонецФункции // ПолучитьБалансПартнера()

Функция ТекстЗапросаБалансПарнера()

    ТекстЗапроса = "ВЫБРАТЬ
                   |    Валюта           КАК Валюта,
                   |    Курс / Кратность КАК Курс
                   |ПОМЕСТИТЬ КурсыВалют
                   |ИЗ
                   |    РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, )
                   |;
                   |
                   |////////////////////////////////////////////////////////////////////////////////
                   |ВЫБРАТЬ
                   |    АналитикаПоПартнерам.Партнер.Код КАК PartnerID,
                   |    СУММА(ВЫБОР
                   |        КОГДА РасчетыСКлиентамиОстатки.Валюта = &ВалютаУправленческогоУчета
                   |            ТОГДА РасчетыСКлиентамиОстатки.СуммаОстаток
                   |            ИНАЧЕ РасчетыСКлиентамиОстатки.СуммаОстаток
                   |            * ЕСТЬNULL(КурсыВалютРасчетов.Курс, 0)
                   |            / ЕСТЬNULL(КурсыВалютУпр.Курс, 1)
                   |        КОНЕЦ) КАК Balance
                   |ИЗ
                   |    РегистрНакопления.РасчетыСКлиентами.Остатки(,
                   |        АналитикаУчетаПоПартнерам.Партнер = &Партнер) КАК РасчетыСКлиентамиОстатки
                   |
                   |        ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
                   |        ПО РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам = АналитикаПоПартнерам.КлючАналитики
                   |
                   |        ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУпр
                   |        ПО (РасчетыСКлиентамиОстатки.Валюта = &ВалютаУправленческогоУчета)
                   |
                   |        ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютРасчетов
                   |        ПО РасчетыСКлиентамиОстатки.Валюта = КурсыВалютРасчетов.Валюта
                   |
                   |СГРУППИРОВАТЬ ПО
                   |    АналитикаПоПартнерам.Партнер";

    Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаБалансПарнера()
